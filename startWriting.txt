# CORDOVA-PLUGIN-HMS-MAP

## Contents
  - [1. Introduction](#1-introduction)
  - [2. Installation Guide](#2-installation-guide)
  - [3. API Reference](#3-api-reference)
  - [4. Configuration and Description](#4-configuration-and-description)
  - [5. Sample Project](#5-sample-project)
  - [6. Questions or Issues](#6-questions-or-issues)
  - [7. Licencing and Terms](#7-licencing-and-terms)

## 1. Introduction

**HUAWEI Map Kit** is a messaging service provided by Huawei. It establishes a messaging channel from the cloud to devices. By integrating Map Kit, you can send messages to your apps on users' devices in real time. This helps you maintain closer ties with users and increases user awareness and engagement with your apps.

This module enables communication between HUAWEI Map Kit SDK and Cordova platform. It exposes all functionality provided by HUAWEI Map Kit SDK.

## 2. Installation Guide

Before you get started, you must register as a HUAWEI Developer and complete identity verification on the [HUAWEI Developer](https://developer.huawei.com/consumer/en/) website. For details, please refer to [Register a HUAWEI ID](https://developer.huawei.com/consumer/en/doc/10104).

### Creating a Project in AppGallery Connect
Creating an app in AppGallery Connect is required in order to communicate with the Huawei services. To create an app, perform the following steps:

**Step 1.** Sign in to [AppGallery Connect](https://developer.huawei.com/consumer/en/service/josp/agc/index.html)  and select **My projects**.

**Step 2.** Select your project from the project list or create a new one by clicking the **Add Project** button.

**Step 3.** Go to **Project Setting** > **General information**, and click **Add app**.
If an app exists in the project and you need to add a new one, expand the app selection area on the top of the page and click **Add app**.

**Step 4.** On the **Add app** page, enter the app information, and click **OK**.

### Configuring the Signing Certificate Fingerprint

A signing certificate fingerprint is used to verify the authenticity of an app when it attempts to access an HMS Core (APK) through the HMS SDK. Before using the HMS Core (APK), you must locally generate a signing certificate fingerprint and configure it in the **AppGallery Connect**. You can refer to 3rd and 4th steps of [Generating a Signing Certificate](https://developer.huawei.com/consumer/en/codelab/HMSPreparation/index.html#2) codelab tutorial for the certificate generation. Perform the following steps after you have generated the certificate.

**Step 1:** Sign in to [AppGallery Connect](https://developer.huawei.com/consumer/en/service/josp/agc/index.html) and select your project from **My Projects**. Then go to **Project Setting** > **General information**. In the **App information** field, click the  icon next to SHA-256 certificate fingerprint, and enter the obtained **SHA-256 certificate fingerprint**.

**Step 2:**  After completing the configuration, click **OK** to save the changes. (Check mark icon)
### Cordova

1. Download the Cordova Map SDK Plugin.
2. Add Platform To Project.

     ***```cordova platform add android```***

3. You can either install the plugin through npm or by downloading from downloads page.

    a. Run the following command in the root directory of your Cordova project to install it through npm.

    ***```cordova plugin add @hmscore/cordova-plugin-hms-map```***


    b. Run the following command in the root directuory of your Cordova project to install it manually after downloading the plugin. <br>

    ***```cordova plugin add <CORDOVA_MAP_PLUGIN_PATH>```***


4. Check whether the Cordova Map SDK is successfully added to Plugin folder in the root directory of the Cordova project.

5. Download **agconnect-services.json** file from AppGallery Connect.

6. Add **agconnect-services.json** and **jks** file to root directory.

7. Add build.json file to your project's root. Add following code to build.json file and edit  build.json file according to your own keystore file.
    ```json
    {
        "android": {
            "debug": {
                "keystore": "./storeFile.jks",
                "storePassword": "storePassword",
                "alias": "keyAlias",
                "password": "keyPassword"
            },
            "release": {
                "keystore": "./storeFile.jks",
                "storePassword": "storePassword",
                "alias": "keyAlias",
                "password": "keyPassword"
            }
        }
    }
    ```

8. Make sure widget id is same as your package name in config.xml. Otherwise demo project will not work properly.

9. Then run the Cordova app

     ***```cordova run android```***

### Ionic

1. Download the Cordova Map SDK Plugin through npm or by downloading from downloads page.

    a. Run the following command in the root directuory of your Cordova project to install it manually after downloading the plugin. <br>

    ***```npm install <CORDOVA_MAP_PLUGIN_PATH>```***
    <br>

    b. Run the following command in the root directory of your Ionic project to install it through npm.

    ***`npm install @hmscore/cordova-plugin-hms-map`***


2. Check whether the Cordova Map SDK is successfully added to the node_modules directory.

3. If you want full Ionic support with code completion etc, install"@ionic-native/core" in your project. <br>

    ***`npm install @ionic-native/core --save-dev`***

4. Copy the "ionic/dist/hms-map" folder from library to "node_modules/@ionic-native" folder under your Ionic project.

5. Compile ionic project.

    a. ***`ionic build`***

    b. ***`npx cap init [appName] [appId]`***

    > ***NOTE*** <br>
    > where appName is the name of your app, and appId is package_name in your agconnect-services.json file (ex: com.example.app).

6. Add a native platform to your project.

    ***`ionic capacitor add android`***

7. Configure the Maven repository address and AppGallery Connect plug-in address for the AppGallery Connect SDK.
    1. Open the build.gradle file in the root directory under `android` folder.
    2. Go to allprojects > repositories and configure the Maven repository address for the AppGallery Connect SDK.
        ```gradle
        allprojects {
            repositories {
                google()
                jcenter()
                maven {url 'https://developer.huawei.com/repo/'}
            }
        }
        ```

    3. Go to buildscript > repositories and configure the Maven repository address for the AppGallery Connect SDK.

        ```gradle
        buildscript {
            repositories {
                google()
                jcenter()
                maven {url 'https://developer.huawei.com/repo/'}
            }
        }
        ```
     4. Go to buildscript > dependencies and configure the AppGallery Connect plug-in address.

        ```gradle
        buildscript {
            dependencies {
                classpath 'com.huawei.agconnect:agcp:1.4.1.300'
            }
        }
        ```
8. Add build dependencies and the AppGallery Connect plug-in address.

    1. Open the build.gradle file in the app directory.
    2. Add the AppGallery Connect plug-in dependency to the bottom of the file.
        ```gradle
        apply plugin: 'com.huawei.agconnect'
        ```
    3. Add signingConfig inside the android section
        ```gradle
        android{
            signingConfigs{
                config{
                    keyAlias 'keyAlias'
                    keyPassword 'keyPassword'
                    storeFile file('storeFile')
                    storePassword 'storePassword'
                }
            }
            buildTypes {
            debug {
                signingConfig signingConfigs.config
            }
            release {
                signingConfig signingConfigs.config
            }
        }
        ```

    4. Add the following code to dependencies.
        ```gradle
        dependencies {
            // other dependencies
            implementation "com.huawei.hms:map:5.0.2.300"
        }
        ```

9. Add agconnect-services.json and jks file to the app directory in your Android project.

10. To update dependencies, and copy any web assets to your project, add following code.

    ***`npx capacitor sync`***

11. Then run the Ionic app.

    ***`ionic capacitor run android`***

    After this command, the demo will be opened android studio. Just run it.